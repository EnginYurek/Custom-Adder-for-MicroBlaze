/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "serial_adder_8_bit.h"
#include "stdio.h"
#include "xio.h"
#include "xparameters.h"
#include "xstatus.h"
#include "xintc.h"
#include "xil_exception.h"

void print(char *str);


int IntcExample(u32 DeviceId);

int SetUpInterruptSystem(XIntc *XIntcInstancePtr);

void DeviceDriverHandler(void *CallbackRef);


static XIntc InterruptController;

volatile static int InterruptProcessed = FALSE;

int main()
{
	int Status;

    init_platform();

    print("Hello World\n\r");

    SERIAL_ADDER_8_BIT_mWriteSlaveReg0(XPAR_SERIAL_ADDER_8_BIT_0_BASEADDR, 0, 1);

	Status = IntcExample(XPAR_AXI_INTC_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

    return 0;
}

//XPAR_AXI_INTC_0_DEVICE_ID

int IntcExample(u32 DeviceId)
{
	int Status;

	Status = XIntc_Initialize(&InterruptController, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XIntc_SelfTest(&InterruptController);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

	Status = SetUpInterruptSystem(&InterruptController);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

	/*Status = XIntc_SimulateIntr(&InterruptController, XPAR_INTC_0_SERIAL_ADDER_0_VEC_ID); //???? Id
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}
*/
	while (1)
		{
			if (InterruptProcessed) {
				break;
			}
		}

	return XST_SUCCESS;

}


int SetUpInterruptSystem(XIntc *XIntcInstancePtr)
{

	int Status;

	Status = XIntc_Connect(XIntcInstancePtr, XPAR_INTC_0_SERIAL_ADDER_8_BIT_0_VEC_ID,
				   (XInterruptHandler)DeviceDriverHandler,
				   (void *)0);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XIntc_Start(XIntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XIntc_Enable(XIntcInstancePtr, XPAR_INTC_0_SERIAL_ADDER_8_BIT_0_VEC_ID);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler)XIntc_InterruptHandler,
				XIntcInstancePtr);


	Xil_ExceptionEnable();

	return XST_SUCCESS;

}

void DeviceDriverHandler(void *CallbackRef)
{
	xil_printf("Engin1");
	InterruptProcessed = TRUE;

	SERIAL_ADDER_8_BIT_mWriteSlaveReg0(XPAR_SERIAL_ADDER_8_BIT_0_BASEADDR, 0, 0);
}


